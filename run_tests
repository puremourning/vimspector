#!/usr/bin/env bash

AbsDirOf() {
  if [ -d "$1" ]; then
    ( cd "$1" && pwd -P )
  else
    ( cd $(dirname "$1") && pwd -P )
  fi
}

BASEDIR=$(AbsDirOf "$0")/${VIMSPECTOR_TEST_BASE:-test-base}
INSTALL=0
UPDATE=0
INSTALLER_ARGS=''
VIM_EXE='vim'

# 1 is stdout
out_fd=1

while [ -n "$1" ]; do
  case "$1" in
    "--basedir"|"--base-dir"|"--test-base")
      shift
      BASEDIR=$(AbsDirOf "$1")
      shift
      ;;
    "--install")
      INSTALL=1
      shift
      ;;
    "--install-method")
      shift
      INSTALL=$1
      shift
      ;;
    "--update"|"--upgrade")
      UPDATE=1
      shift
      ;;
    "--report")
      shift
      VIMSPECTOR_TEST_STDOUT=$1
      shift
      ;;
    "--exe")
      shift
      VIM_EXE=$1
      shift
      ;;
    "--skip-build")
      shift
      SKIP_BUILD=1
      ;;
    "--quiet")
      shift
      # send the output to /dev/null
      # https://stackoverflow.com/a/47553900
      # Note we can't use {out_fd} here because the bash version in CI is too
      # old on macOS
      out_fd=3
      exec 3>/dev/null
      INSTALLER_ARGS="${INSTALLER_ARGS} --quiet"
      ;;
    "--")
      shift
      break
      ;;
    "--help")
      shift
      echo "$(basename $0) [--basedir <basedir>] [--report output] [--exe <executable>] [--skip-build] [--quiet] [--install]|[--install-method script|vim] <optional list of tests in form file:func>"
      echo ""
      echo " --basedir <basedir>     path to runtime directory like the option to install_gadget.py"
      echo " --install               run install_gadget.py, useful with --basedir"
      echo " --report <messages|all> which logs to dump to stdout after a test"
      echo " --exe <executable>      choose vim executable, default 'vim'"
      echo " --skip-build            do not (re)build test programs"
      echo " --quiet                 suppress vim's stdout"
      echo "e.g.: "
      echo " - run all tests: $0"
      echo " - run specific tests script: $0 signature_help.test.vim"
      echo " - run specific tests fun: $0 signature_help.test.vim:Test_signatures_TopLine\(\)"
      echo " - run all tests in a clean env: $0 --basedir \$(mktemp -d) --install"
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

# Version specific flags, which exist in vim but not nvim or other way around
# vim: --not-a-term: silences a warning
IS_NVIM=$($VIM_EXE --version | grep -cm1 NVIM)
VERSION_OPTIONS=$([ "$IS_NVIM" -ne 0 ] && echo '--headless' || echo '--not-a-term')

RUN_VIM="${VIM_EXE} -N --clean ${VERSION_OPTIONS}"
RUN_TEST="${RUN_VIM} -S lib/run_test.vim"

# We use fd 3 for vim's output. Send it to stdout if not already redirected
# Note: can't use ${out_fd} in a redirect because redirects happen before
# variable substitution
if [ "${out_fd}" = "1" ]; then
  exec 3>&1
fi

# Basic pre-flight check that vim and python work
# ffs neovim https://github.com/neovim/neovim/issues/14438
if ${RUN_VIM} -u support/test_python3.vim .fail; then
  rm -f .fail
  echo "$VIM_EXE appears to have working python3 support. Let's go..."
else
  cat .fail
  rm -f .fail
  echo ""
  echo ""
  echo "ERROR: $VIM_EXE does not appear to have working python3 support."
  echo "ERROR: Cannot continue"
  exit 1
fi

if [ -z "$VIMSPECTOR_MIMODE" ]; then
  if which lldb >/dev/null 2>&1; then
    export VIMSPECTOR_MIMODE=lldb
  elif which gdb >/dev/null 2>&1; then
    export VIMSPECTOR_MIMODE=gdb
  else
    echo "Couldn't guess VIMSPECTOR_MIMODE. Need lldb or gdb in path"
    exit 1
  fi
fi

if [ -z "$VIMSPECTOR_ARCH" ]; then
  export VIMSPECTOR_ARCH=$(uname -m)
  if [ "$VIMSPECTOR_ARCH" = "aarch64" ]; then
    export VIMSPECTOR_ARCH=arm64
  fi
fi

BASEDIR_CMD="let g:vimspector_base_dir='${BASEDIR}'"

echo "Testing with:"
echo " * VIMSPECTOR_MIMODE=$VIMSPECTOR_MIMODE"
echo " * VIMSPECTOR_ARCH=$VIMSPECTOR_ARCH"
echo " * RUN_VIM=$RUN_VIM"
echo " * RUN_TEST=$RUN_TEST"
echo " * BASEDIR=$BASEDIR"
echo " * BASEDIR_CMD=$BASEDIR_CMD"

if [ "$INSTALL" = "1" ] || [ "$INSTALL" = "script" ]; then
  if ! python3 $(dirname $0)/install_gadget.py \
               --basedir ${BASEDIR} \
               ${INSTALLER_ARGS} \
               --all \
               --force-enable-csharp \
               --force-enable-node; then
    echo "Script installation reported errors" >&2
    exit 1
  fi
fi

if [ "$INSTALL" = "1" ] || [ "$INSTALL" = "vim" ]; then
  if ! $RUN_VIM -u $(dirname $0)/tests/vimrc \
               --cmd "${BASEDIR_CMD}" \
               -c 'autocmd User VimspectorInstallSuccess qa!' \
               -c 'autocmd User VimspectorInstallFailed cquit!' \
               -c "VimspectorInstall --all netcoredbg vscode-node-debug2"; then
    echo "Vim installation reported errors" >&2
    exit 1
  fi
fi

if [ "$UPDATE" = "1" ]; then
  if ! $RUN_VIM -u $(dirname $0)/tests/vimrc \
               --cmd "${BASEDIR_CMD}" \
               -c 'autocmd User VimspectorInstallSuccess qa!' \
               -c 'autocmd User VimspectorInstallFailed cquit!' \
               -c "VimspectorUpdate"; then
    echo "Vim update reported errors" >&2
    exit 1
  fi
fi



if [ "$SKIP_BUILD" = "1" ]; then
  echo "%SETUP - Skipped building test programs"
else
  echo "%SETUP - Building test programs..."
  set -e
    pushd tests/testdata/cpp/simple
      make clean all
    popd
    pushd support/test/csharp
      dotnet build
    popd
  set +e
  echo "%DONE - built test programs"
fi

# Start
pushd $(dirname $0)/tests > /dev/null
echo "Running Vimspector Vim tests"

RESULT=0

TESTS="$@"

if [ -z "$TESTS" ]; then
  TESTS=*.test.vim
fi

for t in ${TESTS}; do
  echo ""
  echo "%RUN: $t"

  # split on : into fileName and testName
  IFS=: read -s t T <<< "$t"

  TESTLOGDIR=${BASEDIR}/tests/logs/$t

  if ${RUN_TEST} --cmd "${BASEDIR_CMD}" \
                 --cmd 'au SwapExists * let v:swapchoice = "e"' $t $T \
                 >&3\
     && [ -f $t.res ];  then
    echo "%PASS: $t PASSED"
  else
    echo "%FAIL: $t FAILED - see $TESTLOGDIR"
    RESULT=1
  fi

  rm -rf $TESTLOGDIR
  mkdir -p $TESTLOGDIR
  ${RUN_VIM} --version > ${TESTLOGDIR}/vimversion
  if [ "$VIMSPECTOR_TEST_STDOUT" = "messages" ]; then
    if [ -f messages ]; then
      echo "%MESSAGES"
      cat messages
      echo "%END"
    else
      echo "%MESSAGES"
      echo "No messages found"
      echo "%END"
    fi
  fi

  for l in messages debuglog test.log *.testlog; do
    # In CI we can't view the output files, so we just have to cat them
    if [ -f $l ]; then
      if [ "$VIMSPECTOR_TEST_STDOUT" = "all" ]; then
        echo ""
        echo ""
        echo "*** START: $l ***"
        cat $l
        echo "*** END: $l ***"
      fi
      mv $l $TESTLOGDIR
    fi
  done

  rm -f $t.res
done

# close out_fd if it's not stdout/stderr/
(( out_fd > 2 )) && exec 3>&-


echo "Done running tests"
popd > /dev/null

echo ""
echo "All done. Exit with ${RESULT}"

exit $RESULT
